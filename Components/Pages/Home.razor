@page "/"

@rendermode @(new InteractiveServerRenderMode(prerender: false))

<MudGrid>
    <MudItem xs="12" md="4" lg="3">
        <MudText>Number of passwords: @numberOfPasswords</MudText>
        <MudSlider T="int"
                   Value="numberOfPasswords"
                   ValueChanged="@((int newSliderValue)=> UpdateNumberOfPasswords(newSliderValue))"
                   Min=minNumberOfPasswords
                   Max=maxNumberOfPasswords
                   Variant="Variant.Filled"
                   Style="width:250px" />
    </MudItem>
    <MudItem xs="12" md="8" lg="9">
        <MudText>Password length: @passLength</MudText>
        <MudSlider T="int"
                   Value="passLength"
                   ValueChanged="@((int newSliderValue)=> UpdatePassLength(newSliderValue))"
                   Min=minPassLength
                   Max=maxPassLength
                   Variant="Variant.Filled"
                   Style="width:250px" />
    </MudItem>
    <MudItem xs="12" md="4" lg="3">
        <MudStack Row="true">
            <MudStack>
                <MudText>A-Z</MudText>
                <MudCheckBox Color="Color.Primary"
                             Size="Size.Large"
                             Dense="true"
                             Value="useUpperChars"
                             ValueChanged="@((bool newValue)=> UpdateUseUpperChars(newValue))" />
            </MudStack>
            <MudStack>
                <MudText>a-z</MudText>
                <MudCheckBox Color="Color.Primary"
                             Size="Size.Large"
                             Dense="true"
                             Value="useLowerChars"
                             ValueChanged="@((bool newValue)=> UpdateUseLowerChars(newValue))" />
            </MudStack>
            <MudStack>
                <MudText>0-9</MudText>
                <MudCheckBox Color="Color.Primary"
                             Size="Size.Large"
                             Dense="true"
                             Value="useNumberChars"
                             ValueChanged="@((bool newValue)=> UpdateUseNumberChars(newValue))" />
            </MudStack>
            <MudStack>
                <MudText>@symbolChars</MudText>
                <MudCheckBox Color="Color.Primary"
                             Size="Size.Large"
                             Dense="true"
                             Value="useSymbolChars"
                             ValueChanged="@((bool newValue)=> UpdateUseSymbolChars(newValue))" />
            </MudStack>
        </MudStack>
    </MudItem>
    <MudItem xs="12">
        <MudButton OnClick="@(()=> GeneratePasswords())"
                   Variant="Variant.Filled"
                   EndIcon="@Icons.Material.Filled.Refresh"
                   Style="width:250px; height:35px"
                   Color="Color.Primary"
                   IconColor="Color.Secondary">
            <MudText Color="Color.Secondary">Regenerate</MudText>
        </MudButton>
    </MudItem>
</MudGrid>

<MudGrid Spacing="1" Style="margin-top:10px">
    @foreach (string pass in passwords)
    {
        <MudItem xs="12" sm="10" md="6" lg="4">
            <MudCard Elevation="10">
                <MudCardContent>
                    <MudStack>
                        <MudTextField T="string"
                                        Variant="Variant.Outlined"
                                        Margin="Margin.Dense"
                                        Value="@pass"
                                        ReadOnly="true">
                        </MudTextField>
                        <MudStack Row="true">
                            <MudSpacer />
                            <CopyToClipboard TextToCopy="@pass" />
                        </MudStack>
                    </MudStack>
                </MudCardContent>
            </MudCard>
        </MudItem>
    }
</MudGrid>

@code
{
    const int minPassLength = 8;
    const int maxPassLength = 32;
    int passLength = 16;
    const int minNumberOfPasswords = 1;
    const int maxNumberOfPasswords = 12;
    int numberOfPasswords = 12;
    const string upperChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    const string lowerChars = "abcdefghijklmnopqrstuvwxyz";
    const string numberChars = "0123456789";
    const string symbolChars = "!@#$%^&*";
    string charSet = "";
    bool useUpperChars = true;
    bool useLowerChars = true;
    bool useNumberChars = true;
    bool useSymbolChars = true;
    string? randomPass;
    List<string> passwords = new List<string>();
    private static Random random = new Random();

    protected override void OnInitialized()
    {
        GeneratePasswords();
    }

    private void UpdateNumberOfPasswords(int newNumberOfPasswords)
    {
        numberOfPasswords = newNumberOfPasswords;
        GeneratePasswords();
    }

    private void UpdatePassLength(int newPassLength)
    {
        passLength = newPassLength;
        GeneratePasswords();
    }

    private void UpdateUseUpperChars(bool newUseUpperChars)
    {
        useUpperChars = newUseUpperChars;
        GeneratePasswords();
    }

    private void UpdateUseLowerChars(bool newUseLowerChars)
    {
        useLowerChars = newUseLowerChars;
        GeneratePasswords();
    }

    private void UpdateUseNumberChars(bool newUseNumberChars)
    {
        useNumberChars = newUseNumberChars;
        GeneratePasswords();
    }

    private void UpdateUseSymbolChars(bool newUseSymbolChars)
    {
        useSymbolChars = newUseSymbolChars;
        GeneratePasswords();
    }

    private void GeneratePasswords()
    {
        passwords.Clear();
        charSet = "";

        if (useUpperChars) charSet += upperChars;
        if (useLowerChars) charSet += lowerChars;
        if (useNumberChars) charSet += numberChars;
        if (useSymbolChars) charSet += symbolChars;

        if (charSet != "")
        {
            for (int i = 0; i < numberOfPasswords; i++)
            {
                randomPass = new string(Enumerable.Repeat(charSet, passLength)
                .Select(s => s[random.Next(s.Length)]).ToArray());
                passwords.Add(randomPass);
            }
        }
    }
}
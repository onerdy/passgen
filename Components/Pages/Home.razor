@page "/"
@using passgen.Models
@using passgen.Services

@rendermode @(new InteractiveServerRenderMode(prerender: false))

<MudCard Elevation="10" Class="mt-1" Style="width:325px">
    <MudCardContent>
        <MudStack>
            <MudTextField T="string"
                            Variant="Variant.Outlined"
                            Margin="Margin.Dense"
                            Value="@password"
                            ReadOnly="true"
                            AutoGrow>
            </MudTextField>
            <MudStack Row="true">
                <MudSpacer />
                <CopyToClipboard TextToCopy="@password" />
                <MudIconButton Icon="@Icons.Material.Filled.Refresh"
                                Color="Color.Primary"
                                Variant="Variant.Filled"
                                Style="@($"color: {MyMudThemeProvider.MyTheme.Palette.Secondary}")"
                                OnClick="@(()=>
                                        {
                                        UpdatePassword();
                                        })" />

            </MudStack>
        </MudStack>
    </MudCardContent>
    </MudCard>
<MudText Class="mt-2">Password type:</MudText>
<MudRadioGroup Value="passType"
                Style="margin:-8px"
                ValueChanged="@((string newValue)=>
                                {
                                passType = newValue;
                                UpdatePassword();
                                })">
    <MudRadio Value="@("Password")" Color="Color.Primary">Password</MudRadio>
    <MudRadio Value="@("Passphrase")" Color="Color.Primary">Passphrase</MudRadio>
</MudRadioGroup>

@if(passType == "Password")
{
<MudText Class="mt-4">Password length: @passwordOptions.PassLength</MudText>
<MudSlider T="int"
            Value="passwordOptions.PassLength"
            Min=passwordOptions.MinPassLength
            Max=passwordOptions.MaxPassLength
            Variant="Variant.Filled"
            Style="width:250px"
            ValueChanged="@((int newValue)=>
                        {
                        passwordOptions.PassLength = newValue;
                        UpdatePassword();
                        })" />
<MudStack Row="true" Class="mt-6">
        <MudStack Class="mr-4" Spacing="1">
        <MudText>A-Z</MudText>
        <MudCheckBox Color="Color.Primary"
                        Size="Size.Large"
                        Style="margin-left:-8px"               
                        Dense="true"
                        Value="passwordOptions.UseUpperChars"
                        ValueChanged="@((bool newValue)=>
                                    {
                                    passwordOptions.UseUpperChars = newValue;
                                    UpdatePassword();
                                    })" />
    </MudStack>
        <MudStack Class="mr-4" Spacing="1">
        <MudText>a-z</MudText>
        <MudCheckBox Color="Color.Primary"
                        Size="Size.Large"
                        Style="margin-left:-8px"
                        Dense="true"
                        Value="passwordOptions.UseLowerChars"
                        ValueChanged="@((bool newValue)=>
                                        {
                                        passwordOptions.UseLowerChars = newValue;
                                        UpdatePassword();
                                        })" />
    </MudStack>
        <MudStack Class="mr-4" Spacing="1">
        <MudText>0-9</MudText>
        <MudCheckBox Color="Color.Primary"
                        Size="Size.Large"
                        Style="margin-left:-8px" 
                        Dense="true"
                        Value="passwordOptions.UseNumberChars"
                        ValueChanged="@((bool newValue)=>
                                        {
                                        passwordOptions.UseNumberChars = newValue;
                                        UpdatePassword();
                                        })" />
    </MudStack>
    <MudStack Class="mr-4" Spacing="1">
        <MudText>@("!@#$%^&*")</MudText>
        <MudCheckBox Color="Color.Primary"
                        Size="Size.Large"
                        Style="margin-left:-8px" 
                        Dense="true"
                        Value="passwordOptions.UseSymbolChars"
                        ValueChanged="@((bool newValue)=>
                                        {
                                        passwordOptions.UseSymbolChars = newValue;
                                        UpdatePassword();
                                        })" />
    </MudStack>
</MudStack>
}
    
else if(passType == "Passphrase")
{
    <MudStack Spacing="0">
        <MudText Class="mt-4">Dictionary type:</MudText>
        <MudRadioGroup Value="passphraseOptions.DictionaryType"
                        Style="margin:-8px"
                        ValueChanged="@((string newValue)=>
                                        {
                                        passphraseOptions.DictionaryType = newValue;
                                        UpdatePassword();
                                        })">
            <MudRadio Value="@("Standard")" Color="Color.Primary">Standard</MudRadio>
            <MudRadio Value="@("Offensive")" Color="Color.Primary">Offensive</MudRadio>
        </MudRadioGroup>
    </MudStack>

    <MudText Class="mt-4">Number of words: @passphraseOptions.NumberOfWords</MudText>
    <MudSlider T="int"
               Value="passphraseOptions.NumberOfWords"
               ValueChanged="@((int newValue)=>
                                {
                                passphraseOptions.NumberOfWords = newValue;
                                UpdatePassword();
                                })"
                Min=passphraseOptions.MinNumberOfWords
                Max=passphraseOptions.MaxNumberOfWords
                Style="width:250px"
                Variant="Variant.Filled"/>
    <MudStack Row="true">
       <MudText Class="mt-4">Word Separator:</MudText>
        <MudTextField T="string"
                        Value="passphraseOptions.SeparatorChar"
                        MaxLength="1"
                        Variant="Variant.Outlined"
                        Style="width:45px;height:25px; margin-top:10px"
                        Margin="Margin.Dense"
                        Immediate="true"
                        ValueChanged="@((string newValue)=>
                                        {
                                        passphraseOptions.SeparatorChar = newValue;                                        
                                        UpdatePassword();
                                        })" />
    </MudStack>
    <MudStack Row="true" Class="mt-4">
        <MudStack Spacing="1">
            <MudText>Capitalize?</MudText>
            <MudCheckBox Color="Color.Primary"
                            Size="Size.Large"
                            Dense="true"
                            Value="passphraseOptions.Capitalize"
                            Style="margin-left:-5px"
                            ValueChanged="@((bool newValue)=>
                                        {
                                        passphraseOptions.Capitalize = newValue;
                                        UpdatePassword();
                                        })" />
        </MudStack>
        <MudStack Spacing="1">
            <MudText>Add number?</MudText>
            <MudCheckBox Color="Color.Primary"
                            Size="Size.Large"
                            Dense="true"
                            Value="passphraseOptions.AddNumber"
                            Style="margin-left:-5px"
                            ValueChanged="@((bool newValue)=>
                                        {
                                        passphraseOptions.AddNumber = newValue;
                                        UpdatePassword();
                                        })" />
        </MudStack>
    </MudStack>
}

@code
{
    string passType = "Password";
    string password = "";

    PasswordOptions passwordOptions = new PasswordOptions
        {
            PassLength = 16,
            MinPassLength = 8,
            MaxPassLength = 64,
            UseUpperChars = true,
            UseLowerChars = true,
            UseNumberChars = true,
            UseSymbolChars = true
        };

    PassphraseOptions passphraseOptions = new PassphraseOptions
        {
            NumberOfWords = 3,
            MinNumberOfWords = 2,
            MaxNumberOfWords = 6,
            DictionaryType = "Standard",
            SeparatorChar = "-",
            Capitalize = true,
            AddNumber = true
        };

    protected override void OnInitialized()
    {
        UpdatePassword();
    }

    private void UpdatePassword()
    {
        if (passType == "Password")
        {
            password = GeneratorService.GeneratePassword(passwordOptions);
        }
        else if (passType == "Passphrase")
        {
            password = GeneratorService.GeneratePassphrase(passphraseOptions);
        }
    }
}